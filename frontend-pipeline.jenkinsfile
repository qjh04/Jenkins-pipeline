pipeline {
    agent any
    
    // 环境变量设置
    environment {
        // Node.js版本设置
        NODE_VERSION = '20.11.1'  // 更新到最新的LTS版本
        // 部署配置
        // REMOTE_HOST = '101.126.136.69'
        REMOTE_HOST = '192.168.0.69'
        REMOTE_DIR = '/export/temp/kqq_admin/'
        REMOTE_USER = 'root'  // 需要替换为实际的用户名
        // 依赖安装配置
        CLEAN_INSTALL = 'false'  // 默认不清理依赖
        // 从 Jenkins 凭据获取飞书配置
        FEISHU_APP_ID = credentials('feishu-app-id')
        FEISHU_APP_SECRET = credentials('feishu-app-secret')
        // 飞书用户列表使用全局环境变量
    }
    
    stages {
        // 拉取代码
        stage('Checkout') {
            steps {
                script {
                    def stageStartTime = System.currentTimeMillis()
                    
                    echo "开始拉取代码..."
                    git branch: 'test', credentialsId: 'c96914f4-5b65-4230-a456-b9b68f46fcab', url: 'git@github.com:kqq-ai/wonderLand-admin.git'
                    echo "代码拉取完成！"
                    
                    def duration = System.currentTimeMillis() - stageStartTime
                    echo "本阶段执行时间: ${duration/1000}秒"
                }
            }
        }
        
        // 设置Node.js环境
        stage('Setup Node.js') {
            steps {
                script {
                    def stageStartTime = System.currentTimeMillis()
                    
                    echo "开始设置Node.js环境..."
                    echo "正在配置Node.js版本: ${NODE_VERSION}"
                    def nodeHome = tool name: "NodeJS ${NODE_VERSION}", type: 'jenkins.plugins.nodejs.tools.NodeJSInstallation'
                    env.PATH = "${nodeHome}/bin:${env.PATH}"
                    echo "Node.js环境设置完成！"
                    sh 'node --version'
                    sh 'npm --version'
                    
                    def duration = System.currentTimeMillis() - stageStartTime
                    echo "本阶段执行时间: ${duration/1000}秒"
                }
            }
        }
        
        // 安装依赖
        stage('Install Dependencies') {
            steps {
                script {
                    def stageStartTime = System.currentTimeMillis()
                    
                    echo "开始安装项目依赖..."
                    echo "清理旧的依赖..."
                    sh 'rm -rf node_modules package-lock.json'
                    echo "设置npm淘宝镜像源..."
                    sh '''
                        npm config set registry https://registry.npmmirror.com
                        npm install --force --prefer-offline
                    '''
                    echo "项目依赖安装完成！"
                    
                    def duration = System.currentTimeMillis() - stageStartTime
                    echo "本阶段执行时间: ${duration/1000}秒"
                }
            }
        }
        
        // 构建项目
        stage('Build') {
            steps {
                script {
                    def stageStartTime = System.currentTimeMillis()
                    
                    echo "开始构建项目..."
                    echo "正在执行 npm run build..."
                    sh 'npm run build'
                    echo "项目构建完成！"
                    
                    def duration = System.currentTimeMillis() - stageStartTime
                    echo "本阶段执行时间: ${duration/1000}秒"
                }
            }
        }

        // 部署到远程服务器
        stage('Deploy') {
            steps {
                script {
                    def stageStartTime = System.currentTimeMillis()
                    
                    echo "开始部署到远程服务器..."
                    // 先确保远程目录存在
                    sh """
                        ssh -i /root/.ssh/kqq-online.pem ${REMOTE_USER}@${REMOTE_HOST} "mkdir -p ${REMOTE_DIR}"
                    """
                    // 使用指定的私钥文件进行rsync同步
                    sh """
                        rsync -avz --delete-after -e "ssh -i /root/.ssh/kqq-online.pem" ./dist/ ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}
                    """
                    echo "部署完成！"
                    
                    def duration = System.currentTimeMillis() - stageStartTime
                    echo "本阶段执行时间: ${duration/1000}秒"
                }
            }
        }
    }
    
    post {
        always {
            script {
                try {
                    // 1. 获取访问令牌
                    echo "开始获取访问令牌..."
                    def tokenRequestBody = """{
                        "app_id": "${FEISHU_APP_ID}",
                        "app_secret": "${FEISHU_APP_SECRET}"
                    }"""
                    echo "Token请求体: ${tokenRequestBody}"
                    
                    def tokenResponse = httpRequest(
                        url: 'https://open.feishu.cn/open-apis/auth/v3/tenant_access_token/internal',
                        httpMode: 'POST',
                        contentType: 'APPLICATION_JSON',
                        requestBody: tokenRequestBody
                    )
                    
                    def tokenJson = readJSON text: tokenResponse.content
                    def accessToken = tokenJson.tenant_access_token
                    
                    if (accessToken == null || accessToken.trim() == '') {
                        error "获取访问令牌失败: 令牌为空"
                    }
                    
                    echo "获取到的token: ${accessToken}"

                    // 2. 准备消息内容
                    def buildStatus = currentBuild.result ?: 'SUCCESS'
                    def status = buildStatus == 'SUCCESS' ? '✅ 构建成功' : '❌ 构建失败'
                    
                    // 获取当前时间
                    def currentTime = new Date().format("yyyy-MM-dd HH:mm:ss")
                    
                    // 构建URL
                    def buildUrl = env.BUILD_URL ?: "${env.JENKINS_URL}job/${env.JOB_NAME}/${env.BUILD_NUMBER}"
                    
                    // 计算构建耗时
                    def duration = currentBuild.duration
                    def durationStr = ""
                    if (duration < 1000) {
                        durationStr = "${duration}毫秒"
                    } else if (duration < 60000) {
                        def seconds = (duration/1000).intValue()
                        durationStr = "${seconds}秒"
                    } else {
                        def minutes = (duration/60000).intValue()
                        def seconds = ((duration%60000)/1000).intValue()
                        durationStr = "${minutes}分${seconds}秒"
                    }
                    
                    // 使用\\n来确保换行符被正确转义
                    def messageText = "${status}\\\\n" +
                                    "测试流水线：${JOB_NAME}\\\\n" +
                                    "构建编号：#${BUILD_NUMBER}\\\\n" +
                                    "构建耗时：${durationStr}\\\\n" +
                                    "完成时间：${currentTime}\\\\n" +
                                    "构建地址：${buildUrl}\\\\n" +
                                    "构建结果：${buildStatus}"
                    
                    echo "发送的消息内容: ${messageText}"
                    
                    // 3. 获取用户的 open_id
                    def userList = env.FEISHU_USER_LIST.split(',')
                    def mobileQueryString = userList.collect { "mobiles=${it}" }.join('&')
                    def userResponse = httpRequest(
                        url: "https://open.feishu.cn/open-apis/user/v1/batch_get_id?${mobileQueryString}",
                        httpMode: 'GET',
                        customHeaders: [[
                            name: 'Authorization',
                            value: "Bearer ${accessToken}"
                        ]],
                        validResponseCodes: '100:599'
                    )
                    
                    def userJson = readJSON text: userResponse.content
                    def mobileUsers = userJson.data.mobile_users
                    def mobilesNotExist = userJson.data.mobiles_not_exist ?: []
                    
                    if (mobilesNotExist.size() > 0) {
                        def notExistList = ""
                        mobilesNotExist.each { mobile ->
                            if (notExistList) {
                                notExistList += ", "
                            }
                            notExistList += mobile
                        }
                        echo "警告：以下手机号未找到对应用户：${notExistList}"
                    }
                    
                    // 4. 发送消息给每个有效用户
                    def failedUsers = []
                    
                    mobileUsers.each { mobile, users ->
                        users.each { user ->
                            def userId = user.open_id
                            def messagePayload = """{
                                "receive_id": "${userId}",
                                "msg_type": "text",
                                "content": "{\\\"text\\\":\\\"${messageText}\\\"}"
                            }"""
                            
                            try {
                                def response = httpRequest(
                                    url: 'https://open.feishu.cn/open-apis/im/v1/messages?receive_id_type=open_id',
                                    httpMode: 'POST',
                                    customHeaders: [[
                                        name: 'Authorization',
                                        value: "Bearer ${accessToken}"
                                    ], [
                                        name: 'Content-Type',
                                        value: 'application/json; charset=utf-8'
                                    ]],
                                    requestBody: messagePayload.trim(),
                                    validResponseCodes: '100:599'
                                )
                                
                                if (response.status >= 400) {
                                    def errorJson = readJSON text: response.content
                                    echo "发送给用户 ${mobile}(${userId}) 失败: ${errorJson.msg}"
                                    failedUsers.add(mobile)
                                }
                            } catch (Exception e) {
                                echo "发送给用户 ${mobile}(${userId}) 时发生错误: ${e.getMessage()}"
                                failedUsers.add(mobile)
                            }
                        }
                    }
                    
                    // 5. 输出发送结果统计
                    def totalUsers = userList.size()
                    def successUsers = totalUsers - failedUsers.size() - mobilesNotExist.size()
                    echo "消息发送完成，成功：${successUsers}，失败：${failedUsers.size()}，未找到用户：${mobilesNotExist.size()}"
                    if (failedUsers.size() > 0) {
                        def failedList = ""
                        failedUsers.each { mobile ->
                            if (failedList) {
                                failedList += ", "
                            }
                            failedList += mobile
                        }
                        echo "发送失败的用户: ${failedList}"
                    }
                    
                } catch (Exception e) {
                    echo "发送飞书通知失败: ${e.getMessage()}"
                    echo "详细错误: ${e.toString()}"
                    error "发送飞书通知失败"
                }
            }
        }
    }
} 